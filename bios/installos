local osid = 0
while fs.isDir("/os/"..tostring(osid)) do
  osid = osid + 1
end
osid = tostring(osid)

local function pastebinInstall()
  term.clear()
  term.setCursorPos(5, 2)
  term.write("Pastebin code?")
  term.setCursorPos(2, 3)
  local code = read()
  local response = http.get("http://pastebin.com/raw/"..textutils.urlEncode(code))
  if response then
    local installer = response.readAll()
    response.close()
    if not fs.exists("/vmount") then
      fs.makeDir("/vmount")
    end
    local handle = fs.open("/vmount/installer", "w")
    handle.writeLine(installer)
    handle.close()
    
    term.clear()
    term.setCursorPos(5, 2)
    print("OS Name?")
    term.setCursorPos(2, 3)
    local osName = read()
    local handle = fs.open("/os/"..osid.."/config", "w")
    handle.writeLine("name = \""..osName.."\"")
    handle.close()
    
    term.clear()
    term.setCursorPos(1, 1)
    local handle = fs.open("/rom/programs/shell", "r")
    local shell = handle.readAll()
    handle.close()
    
    os.run(getEnv(), "/bios/sandbox", tostring(osid))
    local func, err = load(shell, "shell", "t", sandbox)
    if func then
      fs.makeDir("/os/"..osid.."/fs")
      term.clear()
      term.setCursorPos(1, 1)
      mount.mountraw("rom")
      mount.mountraw("vmount")
      local ok, err = pcall(func, "/vmount/installer")
      mount.unmountraw("rom")
      mount.unmountraw("vmount")
      if not ok then
        print("Error: "..err)
        print("Press any key to continue")
        os.pullEventRaw("key")
      else
        osid = tostring(tonumber(osid) + 1)
      end
    else
      term.clear()
      local notification = "Failed to compile that paste"
      term.setCursorPos(terminal.width / 2 - #notification / 2 + 1, terminal.height / 2 + 1)
      term.write(notification)
      local notification = "[*] Cancel"
      term.setCursorPos(terminal.width - #notification + 1, terminal.height)
      term.write(notification)
    end
    fs.delete("/vmount")    -- For some reason won't delete it
  else
    term.clear()
    local notification = "Failed to get that paste"
    term.setCursorPos(terminal.width / 2 - #notification / 2 + 1, terminal.height / 2 + 1)
    term.write(notification)
    local notification = "[*] Cancel"
    term.setCursorPos(terminal.width - #notification + 1, terminal.height)
    term.write(notification)
  end
  return true
end

local function diskInstall()
  local menu = {}
  
  local path = nil
  local driveName = nil
  index = 1
  for _, name in pairs(peripheral.getNames()) do
    if peripheral.getType(name) == "drive" and disk.hasData(name) and fs.exists(fs.combine(disk.getMountPath(name), "startup")) then    -- Gentlemen, we have ourselves a floppy disk filesystem!
      menu[index] = {
        text = (name:sub(1, 1):upper()..name:sub(2, -1):lower().." ["..disk.getMountPath(name).."]"):gsub("_", " "),
        selectable = true,
        selected = function() path = disk.getMountPath(name); driveName = name return true end,
        keyPressed = function() end
      }
      index = index + 1
    end
  end
  
  menu[index] = {
    text = "",
    selectable = false
  }
  
  menu[index + 1] = {
    text = "Cancel",
    selectable = true,
    selected = function() return true end,
    keyPressed = function() end
  }
  
  if index == 1 then
    menu[1] = menu[2]
    menu[2] = nil
  end
  
  doMenu(menu)
  
  if driveName ~= nil then
    term.clear()
    term.setCursorPos(5, 2)
    print("OS Name?")
    term.setCursorPos(2, 3)
    local osName = read()
    local handle = fs.open("/os/"..osid.."/config", "w")
    handle.writeLine("name = \""..osName.."\"")
    handle.close()
    
    local handle = fs.open("/rom/programs/shell", "r")
    local shell = handle.readAll()
    handle.close()
    
    os.run(getEnv(), "/bios/sandbox", tostring(osid))
    local func, err = load(shell, "shell", "t", sandbox)
    if func then
      fs.makeDir("/os/"..osid.."/fs")
      term.clear()
      term.setCursorPos(1, 1)
      mount.mountraw("rom")
      mount.mount(driveName)
      local ok, err = pcall(func, fs.combine(path, "startup"))
      mount.unmount(driveName)
      mount.unmountraw("rom")
      if not ok then
        print("Error: "..err)
        print("Press any key to continue")
        os.pullEventRaw("key")
      else
        osid = tostring(tonumber(osid) + 1)
      end
    else
      term.clear()
      local notification = "Failed to compile the program"
      term.setCursorPos(terminal.width / 2 - #notification / 2 + 1, terminal.height / 2 + 1)
      term.write(notification)
      local notification = "[*] Cancel"
      term.setCursorPos(terminal.width - #notification + 1, terminal.height)
      term.write(notification)
    end
  end
  return true
end

local function parseFullConfig(path)
  if not fs.exists(path) then
    return nil
  end
  result = {}
  h = fs.open(path, "r")
  if h then
    text = h.readAll()
    h.close()
    for k, v in text:gmatch("%s*([%w_-]+)%s*=%s*\"([^\"]*)\"") do
      result[k] = v
    end
  end
  return result
end

local menu = {}

if http ~= nil then
  menu[1] = {
    text = "Install from Pastebin",
    selectable = true,
    selected = function() local ok, err = pcall(pastebinInstall); if not ok then print(err); os.pullEventRaw("key") end end,
    keyPressed = function() end
  }
end

menu[#menu + 1] = {
  text = "Install from disk",
  selectable = true,
  selected = function() local ok, err = pcall(diskInstall); if not ok then print(err); os.pullEventRaw("key") end end,
  keyPressed = function() end
}

menu[#menu + 1] = {
  text = "",
  selectable = false
}

menu[#menu + 1] = {
  text = "Cancel",
  selectable = true,
  selected = function() return true end,
  keyPressed = function() end
}

local password = parseFullConfig(config).password

term.clear()
term.setCursorPos(5, 2)
write("Password")
term.setCursorPos(2, 3)
pw = read("*")

if pw == password then
  doMenu(menu)
end