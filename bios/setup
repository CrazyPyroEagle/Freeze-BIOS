local biosConfig = config.parseFile(globalConfig)
local secureSettings = biosConfig.secureMode == "true"
local password = biosConfig.password

local function configureOS(id)
  if type(id) ~= "string" then
    id = tostring(id)
  end
  if not fs.exists("/os/"..id) then
    return
  end
  
  term.clear()
  term.setCursorPos(5, 2)
  write("Password")
  term.setCursorPos(2, 3)
  pw = read("*")
  
  if pw == password then
    settings.load("/os/"..id.."/default_settings")
    menu = {}
    
    menu[1] = {
      key = "bios.use_multishell",
      value = settings.get("bios.use_multishell") or false,
      selectable = true,
      selected = function() menu[1].value = not menu[1].value menu[1].text = "Multishell: "..(menu[1].value and "enabled" or "disabled") return false end,
      keyPressed = function() end
    }
    menu[1].text = "Multishell: "..(menu[1].value and "enabled" or "disabled")
    menu[2] = {
      key = "list.show_hidden",
      value = settings.get("list.show_hidden") or false,
      selectable = true,
      selected = function() menu[2].value = not menu[2].value menu[2].text = "Show hidden files: "..(menu[2].value and "enabled" or "disabled") return false end,
      keyPressed = function() end
    }
    menu[2].text = "Show hidden files: "..(menu[2].value and "enabled" or "disabled")
    menu[3] = {
      key = "shell.autocomplete",
      value = settings.get("shell.autocomplete") or false,
      selectable = true,
      selected = function() menu[3].value = not menu[3].value menu[3].text = "Shell autocomplete: "..(menu[3].value and "enabled" or "disabled") return false end,
      keyPressed = function() end
    }
    menu[3].text = "Shell autocomplete: "..(menu[3].value and "enabled" or "disabled")
    menu[4] = {
      key = "lua.autocomplete",
      value = settings.get("lua.autocomplete") or false,
      selectable = true,
      selected = function() menu[4].value = not menu[4].value menu[4].text = "Lua autocomplete: "..(menu[4].value and "enabled" or "disabled") return false end,
      keyPressed = function() end
    }
    menu[4].text = "Lua autocomplete: "..(menu[4].value and "enabled" or "disabled")
    menu[5] = {
      key = "edit.autocomplete",
      value = settings.get("edit.autocomplete") or false,
      selectable = true,
      selected = function() menu[5].value = not menu[5].value menu[5].text = "Edit autocomplete: "..(menu[5].value and "enabled" or "disabled") return false end,
      keyPressed = function() end
    }
    menu[5].text = "Edit autocomplete: "..(menu[5].value and "enabled" or "disabled")
    menu[6] = {
      text = "",
      selectable = false
    }
    menu[7] = {
      text = "Save & Exit",
      selectable = true,
      selected = function() return true end,
      keyPressed = function() end
    }
    
    doMenu(menu)    -- Need to add default option so that it can be set to use default
    
    settings.save("/os/"..id.."/default_settings")
  else
    term.setCursorPos(2, 5)
    write("Incorrect password! Permission denied. "..password)
  end
end

local function selectOS()
  term.clear()
  menu = {}
  
  local index = 0
  local selected = -1
  while fs.isDir("/os/"..tostring(index)) do
    local copy = index
    menu[index + 1] = {
      text = config.parse(index).name,
      selectable = true,
      selected = function() selected = copy return true end,
      keyPressed = function() end
    }
    index = index + 1
  end
  menu[tonumber(biosConfig.boot) + 1].text = "> "..menu[tonumber(biosConfig.boot) + 1].text
  doMenu(menu)
  
  biosConfig.boot = selected
  config.writeFile(globalConfig, biosConfig)
  
  return false
end

local function changePassword()
  term.clear()
  local notification = "[Ctrl] Cancel"
  term.setCursorPos(terminal.width - #notification + 1, terminal.height)
  term.write(notification)
  
  local newpw = nil
  local function requestNew()
    term.setCursorPos(5, 2)
    write("Password")
    term.setCursorPos(5, 4)
    write("Reenter")
    term.setCursorPos(2, 3)
    local pw = read("*")
    term.setCursorPos(2, 5)
    local pw2 = read("*")
    while #pw < 6 or pw ~= pw2 do
      term.setCursorPos(2, 7)
      term.clearLine()
      if #pw < 6 then
        write("Password must be at least 6 characters!")
      else
        write("Passwords must match!")
      end
      term.setCursorPos(2, 5)
      term.clearLine()
      term.setCursorPos(2, 3)
      term.clearLine()
      pw = read("*")
      term.setCursorPos(2, 5)
      pw2 = read("*")
    end
    newpw = pw
  end
  
  parallel.waitForAny(requestNew, function() repeat _, key = os.pullEventRaw("key") until key == 29 or key == 157 end)
  
  if newpw ~= nil then
    password = newpw
    biosConfig.password = newpw
    config.writeFile(globalConfig, biosConfig)
  end
  return false
end

local function configureBIOS()
  term.clear()
  term.setCursorPos(5, 2)
  write("Password")
  term.setCursorPos(2, 3)
  pw = read("*")
  
  if pw == password then
    menu = {
      {
        text = "Select OS",
        selectable = true,
        selected = selectOS,
        keyPressed = function() end
      }, {
        text = "Change password",
        selectable = true,
        selected = changePassword,
        keyPressed = function() end
      }, {
        text = "Secure mode",
        selectable = true,
        selected = function() return false end,
        keyPressed = function() end
      }, {
        text = "",
        selectable = false,
      }, {
        text = "Save & Exit",
        selectable = true,
        selected = function() return true end,
        keyPressed = function() end
      }
    }
    
    doMenu(menu)
    
    -- Here is where the settings are saved (not yet necessary)
  else
    term.setCursorPos(2, 5)
    write("Incorrect password! Permission denied.")
  end
  
  return false
end

local function uninstallBIOS()
  term.clear()
  term.setCursorPos(5, 2)
  write("Password")
  term.setCursorPos(2, 3)
  pw = read("*")
  
  if pw == password then
    local notification = "Uninstall Freeze BIOS?"
    term.clear()
    term.setCursorPos(terminal.width / 2 - #notification / 2 + 1, terminal.height / 2 + 1)
    term.write(notification)
    term.setCursorPos(1, terminal.height / 2 + 2)
    local response = read()
    if response:lower() == "yes" then
      term.clear()
      term.setCursorPos(1, 1)
      
      write("Moving OS files to \"olddata\"...")
      fs.makeDir("/olddata")
      for _, osid in pairs(fs.list("/os")) do
        if osid ~= "default" then
          ok, err = pcall(function() fs.move(fs.combine(fs.combine("os", osid), "fs"), fs.combine("/olddata", osid)) end)
          if not ok then
            print("\nError: "..err)
            fs.delete("/olddata")
            os.pullEventRaw("key")
          end
        end
      end
      print(" done")
      
      write("Deleting BIOS files...")
      for _, file in pairs(fs.list("/")) do
        if file ~= "olddata" and not fs.isReadOnly(file) then
          pcall(fs.delete, file)
        end
      end
      print(" done")
      
      term.clear()
      local notification = "Successfully Uninstalled!"
      term.setCursorPos(terminal.width / 2 - #notification / 2 + 1, terminal.height / 2 + 1)
      term.write(notification)
      local notification = "[*] Reboot"
      term.setCursorPos(terminal.width - #notification + 1, terminal.height)
      term.write(notification)
      os.pullEventRaw("key")
      os.reboot()
    end
  end
  
  return false
end

local options = {}
local index = 0
while fs.isDir("/os/"..tostring(index)) do
  local copy = index
  options[index + 1] = {
    text = config.parse(index).name,
    selectable = true,
    selected = function() configureOS(copy) return false end,
    keyPressed = function() end
  }
  index = index + 1
end

options[index + 1] = {
  text = "",
  selectable = false,
}

options[index + 2] = {
  text = "Install OS",
  selectable = true,
  selected = function() os.run(getEnv(), "/bios/installos") return false end,
  keyPressed = function() end
}

options[index + 3] = {
  text = "Default Settings",
  selectable = true,
  selected = function() configureOS("default") return false end,
  keyPressed = function() end
}

options[index + 4] = {
  text = "BIOS Settings",
  selectable = true,
  selected = configureBIOS,
  keyPressed = function() end
}

options[index + 5] = {
  text = "Exit Setup",
  selectable = true,
  selected = function() return true end,
  keyPressed = function() end
}

options[index + 6] = {
  text = "",
  selectable = false
}

options[index + 7] = {
  text = "Uninstall BIOS",
  selectable = true,
  selected = uninstallBIOS,
  keyPressed = function() end
}

term.clear()
doMenu(options)