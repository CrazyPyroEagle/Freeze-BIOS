local function downloadFile(path)
  local file = http.get("https://raw.github.com/CrazyPyroEagle/Freeze-BIOS/master/"..path)
  if file ~= nil then
    return file.readAll()
  else
    return nil
  end
end

local function updateBIOS()
  term.clear()
  local notification = "Updating Freeze BIOS..."
  term.setCursorPos(terminal.width / 2 - #notification / 2 + 1, terminal.height / 2 + 1)
  term.write(notification)
  
  local handle = fs.open("/bios/dlupdate", "r")
  local code = handle.readAll()
  handle.close()
  
  local func, err = load(code, "updating", "t", getEnv())
  if func then
    local ok, err = pcall(func)
    if not ok then
      term.clear()
      local notification = "Error: "..err
      term.setCursorPos(terminal.width / 2 - #notification / 2 + 1, terminal.height / 2 + 1)
      term.write(notification)
      local notification = "[*] Reboot"
      term.clear()
      term.setCursorPos(terminal.width - #notification + 1, terminal.height)
      term.write(notification)
      os.pullEventRaw("key")
    else
      term.clear()
      local notification = "Finished updating!"
      term.setCursorPos(terminal.width / 2 - #notification / 2 + 1, terminal.height / 2 + 1)
      term.write(notification)
      local notification = "[*] Reboot"
      term.clear()
      term.setCursorPos(terminal.width - #notification + 1, terminal.height)
      term.write(notification)
      os.pullEventRaw("key")
    end
  else
    term.clear()
    local notification = "Error: "..err
    term.setCursorPos(terminal.width / 2 - #notification / 2 + 1, terminal.height / 2 + 1)
    term.write(notification)
    local notification = "[*] Reboot"
    term.clear()
    term.setCursorPos(terminal.width - #notification + 1, terminal.height)
    term.write(notification)
    os.pullEventRaw("key")
  end
  os.reboot()
end

local function updateUpdater(path)
  term.clear()
  local notification = "Updating the updater..."
  term.setCursorPos(terminal.width / 2 - #notification / 2 + 1, terminal.height / 2 + 1)
  term.write(notification)
  
  local updater = downloadFile(path)
  if updater ~= nil then
    local ok, err = pcall(load(updater, "updating", "t", getEnv()))
    if not ok then
      term.clear()
      local notification = "Error: "..err
      term.setCursorPos(terminal.width / 2 - #notification / 2 + 1, terminal.height / 2 + 1)
      term.write(notification)
      local notification = "[*] Reboot"
      term.clear()
      term.setCursorPos(terminal.width - #notification + 1, terminal.height)
      term.write(notification)
      os.pullEventRaw("key")
    end
    os.reboot()
  else
    term.clear()
    local notification = "Failed to download the updater"
    term.setCursorPos(terminal.width / 2 - #notification / 2 + 1, terminal.height / 2 + 1)
    term.write(notification)
    local notification = "[*] Reboot"
    term.clear()
    term.setCursorPos(terminal.width - #notification + 1, terminal.height)
    term.write(notification)
    os.pullEventRaw("key")
  end
end

local response = http.get("https://api.github.com/repos/CrazyPyroEagle/Freeze-BIOS/contents/bios/?ref=master")

if response ~= nil then
  local rawresponse = response.readAll()
  response.close()
  
  if rawresponse:find("\"path\"%s*:%s*\"bios/build\"") ~= nil then
    local response = http.get("https://raw.github.com/CrazyPyroEagle/Freeze-BIOS/master/bios/build")

    if response ~= nil then
      local remoteBuild = config.parseRaw(response.readAll())
      local buildFile = fs.open("/bios/build", "r")
      local localBuild = config.parseRaw(buildFile.readAll())
      buildFile.close()
      
      -- Discontinuation was a stupid idea.
      --[[if remoteBuild.discontinued == nil or remoteBuild.discontinued == "true" then
        term.clear()
        local notification = "Update requires reinstallation"
        term.setCursorPos(terminal.width / 2 - #notification / 2 + 1, terminal.height / 2 + 1)
        term.write(notification)
        local notification = "[*] Reboot"
        term.setCursorPos(terminal.width - #notification + 1, terminal.height)
        term.write(notification)
        os.pullEventRaw("key")
      else]]if remoteBuild.updaterBuild ~= localBuild.updaterBuild then
        updateUpdater(remoteBuild.updaterPath)
      elseif remoteBuild.buildid ~= localBuild.buildid then
        updateBIOS()
      else
        return    -- We don't want to reboot if there's no update.
      end
      os.reboot()
    end
  else    -- The file is absent, the version must be outdated
    updateBIOS()
    os.reboot()
  end
end