local function parseFullConfig(text)
  result = {}
  if text then
    for k, v in text:gmatch("%s*([%w_-]+)%s*=%s*\"([^\"]*)\"") do
      result[k] = v
    end
  end
  return result
end

local function downloadFile(path)
  local file = http.get("https://raw.github.com/CrazyPyroEagle/Freeze-BIOS/master/"..path)
  if file ~= nil then
    return file.readAll()
  else
    return nil
  end
end

local function updateBIOS()
  term.clear()
  local notification = "Updating Freeze BIOS..."
  term.setCursorPos(terminal.width / 2 - #notification / 2 + 1, terminal.height / 2 + 1)
  term.write(notification)
  
  local handle = fs.open("/bios/dlupdate", "r")
  local code = handle.readAll()
  handle.close()
  
  local ok, err = pcall(load(code, "updating", "t", getEnv()))
  if not ok then
    term.clear()
    local notification = "Error: "..err
    term.setCursorPos(terminal.width / 2 - #notification / 2 + 1, terminal.height / 2 + 1)
    term.write(notification)
    local notification = "[*] Reboot"
    term.clear()
    term.setCursorPos(terminal.width - #notification + 1, terminal.height)
    term.write(notification)
    os.pullEventRaw("key")
  else
    term.clear()
    local notification = "Finished updating!"
    term.setCursorPos(terminal.width / 2 - #notification / 2 + 1, terminal.height / 2 + 1)
    term.write(notification)
    local notification = "[*] Reboot"
    term.clear()
    term.setCursorPos(terminal.width - #notification + 1, terminal.height)
    term.write(notification)
    os.pullEventRaw("key")
  end
  os.reboot()
end

local function updateUpdater(path)
  term.clear()
  local notification = "Updating the updater..."
  term.setCursorPos(terminal.width / 2 - #notification / 2 + 1, terminal.height / 2 + 1)
  term.write(notification)
  
  local updater = downloadFile(path)
  if updater ~= nil then
    local ok, err = pcall(load(updater, "updating", "t", getEnv()))
    if not ok then
      term.clear()
      local notification = "Error: "..err
      term.setCursorPos(terminal.width / 2 - #notification / 2 + 1, terminal.height / 2 + 1)
      term.write(notification)
      local notification = "[*] Reboot"
      term.clear()
      term.setCursorPos(terminal.width - #notification + 1, terminal.height)
      term.write(notification)
      os.pullEventRaw("key")
    end
    os.reboot()
  else
    term.clear()
    local notification = "Failed to download the updater"
    term.setCursorPos(terminal.width / 2 - #notification / 2 + 1, terminal.height / 2 + 1)
    term.write(notification)
    local notification = "[*] Reboot"
    term.clear()
    term.setCursorPos(terminal.width - #notification + 1, terminal.height)
    term.write(notification)
    os.pullEventRaw("key")
  end
end

local response = http.get("https://api.github.com/CrazyPyroEagle/Freeze-BIOS/contents/bios/?ref=master")

if response ~= nil and response.readAll():match("\"path\":\"bios/build\"") then
  local response = http.get("https://raw.github.com/CrazyPyroEagle/Freeze-BIOS/master/bios/build")

  if response ~= nil then
    local remoteBuild = parseFullConfig(response.readAll())
    response.close()
    local buildFile = fs.open("/bios/build", "r")
    local localBuild = parseFullConfig(buildFile.readAll())
    buildFile.close()
    
    if remoteBuild.discontinued ~= nil then
      term.clear()
      local notification = "Update requires reinstallation"
      term.setCursorPos(terminal.width / 2 - #notification / 2 + 1, terminal.height / 2 + 1)
      term.write(notification)
      local notification = "[*] Reboot"
      term.clear()
      term.setCursorPos(terminal.width - #notification + 1, terminal.height)
      term.write(notification)
      os.pullEventRaw("key")
    elseif remoteBuild.updaterBuild ~= localBuild.updaterBuild then
      updateUpdater(remoteBuild.updaterPath)
    elseif remoteBuild.buildid ~= localBuild.buildid then
      updateBIOS()
    end
    os.reboot()
  end
else    -- The file changed, the version must be outdated
  updateBIOS()
  os.reboot()
end